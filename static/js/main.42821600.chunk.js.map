{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","result","number1","number2","operator","numberEntry","clear","setState","number","n","op","equals","parseInt","toFixed","console","log","this","className","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42821600.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n//Create a simple counter button that will increment every time it is clicked.\n// class App extends React.Component{\n//   state ={\n//     counter:0,\n//   }\n//   clickFunction =()=>{\n//     this.setState({\n//       counter: this.state.counter +1\n//     });\n//   }\n//   render(){\n//   return(\n//     <div className=\"all\">\n//       <a onClick={this.clickFunction} className=\"button\" href=\"#\">{this.state.counter}</a>\n//     </div>\n//   )\n//   }\n// }\n\n//Now we need a button to decrement the number when it is clicked.\n// class App extends React.Component{\n//   state ={\n//     counter:0,\n//   }\n//   increase =()=>{\n//     this.setState({\n//       counter: this.state.counter +1\n//     });\n//   }\n//   decrease =()=>{\n//     this.setState({\n//       counter: this.state.counter -1\n//     });\n//   }\n//   render(){\n//   return(\n//     <div className=\"all\">\n//      <h1>{this.state.counter}</h1>\n//       <a onClick={this.increase} className=\"button\" href=\"#\">Increase</a>\n//       <a onClick={this.decrease} className=\"button\" href=\"#\">Decrease</a>\n//     </div>\n//   )\n//   }\n// }\n\n//Calculator challenge\nclass App extends React.Component {\n  state = {\n    result: \"\",\n    number1: \"\",\n    number2: \"\",\n    operator: \"\",\n    numberEntry: 1,\n  }\n\n  clear = () => {\n    this.setState({\n      result: \"\",\n      number1: \"\",\n      number2: \"\",\n      operator: \"\",\n      numberEntry: 1,\n    });\n  }\n\n  number = (n) => {\n    if (this.state.numberEntry === 1) {\n      this.setState(\n        //to allow multiple digits to be entered into the calculator\n        { number1: this.state.number1 + n, \n        result: this.state.number1 + n,\n      });\n    }\n    if (this.state.numberEntry === 2) {\n      this.setState(\n        { number2: this.state.number2 + n, \n        result: this.state.number2 + n\n      });\n    }\n  }\n\n  operator = (op) => {\n    this.setState({\n      numberEntry: 2,\n      operator: (op),\n      result:(op),\n    });\n  }\n\n  equals = () => {\n    if (this.state.operator === \"รท\") {\n      this.setState({\n        result: (parseInt(this.state.number1) / parseInt(this.state.number2)).toFixed(3),\n      });\n    }\n    if (this.state.operator === \"x\") {\n      this.setState({\n        result: parseInt(this.state.number1) * parseInt(this.state.number2),\n      });\n    }\n    if (this.state.operator === \"-\") {\n      this.setState({\n        result: parseInt(this.state.number1) - parseInt(this.state.number2),\n      });\n    }\n    if (this.state.operator === \"+\") {\n      this.setState({\n        result: parseInt(this.state.number1) + parseInt(this.state.number2),\n      });\n    }\n  }\n\n  render() {\n    console.log(this.state)\n    console.log(typeof(this.state.number2))\n    return (\n      <div className=\"all\">\n        <h1>{this.state.result}</h1>\n        <div className=\"line1\">\n          <button onClick={this.clear} className=\"clear\">clear</button>\n          <button onClick={() => this.operator(\"รท\")} className=\"divide\">รท</button>\n        </div>\n        <div className=\"line2\">\n          <button onClick={() => this.number(7)} className=\"seven\">7</button>\n          <button onClick={() => this.number(8)} className=\"eight\">8</button>\n          <button onClick={() => this.number(9)} className=\"nine\">9</button>\n          <button onClick={() => this.operator(\"x\")} className=\"multiply\">x</button>\n        </div>\n        <div className=\"line3\">\n          <button onClick={() => this.number(4)} className=\"four\">4</button>\n          <button onClick={() => this.number(5)} className=\"five\">5</button>\n          <button onClick={() => this.number(6)} className=\"six\">6</button>\n          <button onClick={() => this.operator(\"-\")} className=\"minus\">-</button>\n        </div>\n        <div className=\"line4\">\n          <button onClick={() => this.number(1)} className=\"one\">1</button>\n          <button onClick={() => this.number(2)} className=\"two\">2</button>\n          <button onClick={() => this.number(3)} className=\"three\">3</button>\n          <button onClick={() => this.operator(\"+\")} className=\"plus\">+</button>\n        </div>\n        <div className=\"line5\">\n          <button onClick={() => this.number(0)} className=\"zero\">0</button>\n          <button onClick={this.equals} className=\"equals\">=</button>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}